<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="err_codeDoesnottExistsOrExpired" xml:space="preserve">
    <value>Code doesn't exists or expired</value>
  </data>
  <data name="err_errorAt" xml:space="preserve">
    <value>Error at</value>
  </data>
  <data name="err_userNotFound" xml:space="preserve">
    <value>User not found</value>
  </data>
  <data name="err_wrongUserNameOrPassword" xml:space="preserve">
    <value>Wrong user name or password.</value>
  </data>
  <data name="rule_accountIdBelongsToUser" xml:space="preserve">
    <value>AccountId doesn't belong to user.</value>
  </data>
  <data name="rule_budgetCannotBeNull" xml:space="preserve">
    <value>Budget can't be empty.</value>
  </data>
  <data name="rule_budgetDescMaxLong" xml:space="preserve">
    <value>Maximum length of the budget description is 200 characters.</value>
  </data>
  <data name="rule_budgetIdBelongsToUser" xml:space="preserve">
    <value>BudgetId doesn't belong to user.</value>
  </data>
  <data name="rule_budgetMustHaveAtLeastOneActivePeriod" xml:space="preserve">
    <value>Budget must have at least one active period.</value>
  </data>
  <data name="rule_budgetMustHaveAtLeastOneCategory" xml:space="preserve">
    <value>Budget must have at least one category.</value>
  </data>
  <data name="rule_budgetNameMaxLong" xml:space="preserve">
    <value>Maximum length of the budget name is 50 characters.</value>
  </data>
  <data name="rule_budgetNameRequired" xml:space="preserve">
    <value>Budget name cannot be empty.</value>
  </data>
  <data name="rule_budgetValidToDateMustBeGreaterThanValidFromDate" xml:space="preserve">
    <value>Bbudget's end date must be at least one day greater than the start date.</value>
  </data>
  <data name="rule_categoryIdMustBeValidAndBelongToUser" xml:space="preserve">
    <value>Category ID must belong to the given user and be valid.</value>
  </data>
  <data name="rule_categoryIdsBelongToBudget" xml:space="preserve">
    <value>One or more categoryId doesn't belong to budget.</value>
  </data>
  <data name="rule_categoryMaxValueMustBePositive" xml:space="preserve">
    <value>Budget category value must be positive.</value>
  </data>
  <data name="rule_categoryMustBelongToUser" xml:space="preserve">
    <value>Categories must belong to the current user.</value>
  </data>
  <data name="rule_categoryValuesMustMatch" xml:space="preserve">
    <value>Category value for the period must be specified.</value>
  </data>
  <data name="rule_emailIsRequired" xml:space="preserve">
    <value>Email is requaired.</value>
  </data>
  <data name="rule_emailMaxLong" xml:space="preserve">
    <value>Email cannot exceed 200 characters.</value>
  </data>
  <data name="rule_emailMinLong" xml:space="preserve">
    <value>Email must be at least 6 characters long.</value>
  </data>
  <data name="rule_emailTaken" xml:space="preserve">
    <value>Email address is already taken.</value>
  </data>
  <data name="rule_firstPeriodMustMatchBudgetStart" xml:space="preserve">
    <value>First period must have a start date that matches the budget.</value>
  </data>
  <data name="rule_invalid EmailFormat" xml:space="preserve">
    <value>Invalid email address format.</value>
  </data>
  <data name="rule_lastPeriodMustMatchBudgetEnd" xml:space="preserve">
    <value>Last period must have an end date that matches the budget.</value>
  </data>
  <data name="rule_passwordFormat" xml:space="preserve">
    <value>Password must be at least 8 characters long, including at least one lowercase letter, one uppercase letter, one digit, and one special character.</value>
  </data>
  <data name="rule_passwordRequired" xml:space="preserve">
    <value>Password is required.</value>
  </data>
  <data name="rule_periodCategoriesMustMatchBudgetCategories" xml:space="preserve">
    <value>Sum of the category values for periods must be equal to the value for the given budget category.</value>
  </data>
  <data name="rule_periodMustBeAtLeastOneDay" xml:space="preserve">
    <value>Budget period must be at least one day long.</value>
  </data>
  <data name="rule_periodsMustBeSequential" xml:space="preserve">
    <value>Periods in the budget must be sequential.</value>
  </data>
  <data name="rule_splitValuePositive" xml:space="preserve">
    <value>Split values should be positive.</value>
  </data>
  <data name="rule_transferDescMaxLong" xml:space="preserve">
    <value>Transfer description cannot exceed 200 characters.</value>
  </data>
  <data name="rule_transferNameMaxLong" xml:space="preserve">
    <value>Transfer name cannot exceed 50 characters.</value>
  </data>
  <data name="rule_transferNameRequired" xml:space="preserve">
    <value>Transfer name is required.</value>
  </data>
  <data name="rule_transferValueEqualsSplitSum" xml:space="preserve">
    <value>Transfer value not equals split value sum.</value>
  </data>
  <data name="rule_transferValuePositive" xml:space="preserve">
    <value>Transfer value should be positive.</value>
  </data>
  <data name="rule_usernameMaxLong" xml:space="preserve">
    <value>Username cannot exceed 50 characters.</value>
  </data>
  <data name="rule_usernameMinLong" xml:space="preserve">
    <value>Username must be at least 3 characters long.</value>
  </data>
  <data name="rule_usernameRequired" xml:space="preserve">
    <value>Username is required.</value>
  </data>
  <data name="rule_usernameTaken" xml:space="preserve">
    <value>Username is already taken.</value>
  </data>
</root>